/*
  Input: A tensor T: V x V >-> W and a matrix X in GL(V).
  Return: True/false, when true, returns matrix Y such that (X,Y) is a pseudo-isometry of T.
*/

__GetOuterAction := function( T, X ) 
  V := T`Domain[1];
  W := T`Codomain;
  d := Dimension(V);
  e := Dimension(W);
  i := 1;
  j := 1;
  B := [];
  B_X := [];
  while i le d do
    w := V.i * T * V.j;
    w_X := (V.i*Matrix(X)) * T * (V.j*Matrix(X));
    inc_BX := Dimension(sub<W | B_X cat [w_X] >) gt #B_X;
    inc_B := Dimension(sub<W | B cat [w] >) gt #B;
    if inc_BX and inc_B then
      Append(~B,w);
      Append(~B_X,w_X);
    elif inc_BX or inc_B then
      return false, _;
    end if;
    j +:= 1;
    if j gt d then
      j := 1;
      i +:= 1;
    end if;
  end while;
  Y := Hom(W,W)!hom< W -> W | [ <B[i], B_X[i]> : i in [1..e] ] >;
  if IsPseudoIsometry(T,X,Y) then
    return true, Y;
  end if;
  return false, _;
end function;
